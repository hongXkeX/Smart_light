C51 COMPILER V9.00   LDCHIP                       12/12/2011 19:59:16 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE LDCHIP
OBJECT MODULE PLACED IN LDChip.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE LDChip.c OPTIMIZE(SIZE) BROWSE DEB
                    -UG OBJECTEXTEND PAGEWIDTH(79) PAGELENGTH(66) TABS(2)

line level    source

   1          /****************************************************************
             -********************/
   2          //  °æÈ¨ËùÓÐ£ºCopyright (c) 2005 - 2010 ICRoute INC.
   3          /****************************************************************
             -********************/
   4          
   5          
   6          
   7          #include "STC10F08XE.H"
   8          #include "LDChip.h"
   9          #include "Reg_RW.h"
  10          #include "FlashDef.h"
  11          #include "DemoSound.h"
  12          
  13          sbit RSTB=P3^3;
  14          sbit CSB=P2^6;
  15          
  16          uint32 nMp3StartPos=0;
  17          uint32 nMp3Size=0;
  18          uint32 nMp3Pos=0;
  19          uint32 nCurMp3Pos=0;
  20          uint8  idata nLD_Mode = LD_MODE_IDLE;   //  ÓÃÀ´¼ÇÂ¼µ±Ç°ÊÇÔÚ½øÐÐASR
             -Ê¶±ð»¹ÊÇÔÚ²¥·ÅMP3
  21          uint8 bMp3Play=0;             //  ÓÃÀ´¼ÇÂ¼²¥·ÅMP3µÄ×´Ì¬
  22          uint8 idata ucRegVal;
  23          uint8 idata ucHighInt;
  24          uint8 idata ucLowInt;
  25          uint8 idata ucStatus;
  26          uint8 idata ucSPVol=15; // MAX=15 MIN=0   //  SpeakerÀ®°ÈÊä³öµÄÒôÁ¿
  27          
  28          extern uint8 idata nAsrStatus;
  29          extern uint8 idata nDemoFlag;
  30          void ProcessInt0();
  31          
  32          /****************************************************************
             -********************/
  33          //  Õâ¸öCÎÄ¼þÀïÃæ°üº¬µÄº¯Êý£¬Ïàµ±ÓÚLD3320µÄÇý¶¯£¬ÒÔCÓïÑÔÔ´´úÂëµÄÐÎ
             -Ê½Ìá¹©
  34          //  ¿ª·¢ÕßÔÚÃ»ÓÐµ÷ÊÔÍ¨¹ýÖ®Ç°£¬Ò»¶¨²»ÒªÐÞ¸ÄÕâÀïÃæµÄº¯Êý
  35          //  
  36          //  LD_ReloadMp3Data()º¯ÊýÓÉÓÚÇ£Éæµ½Ö÷¿ØMCUÏòÍâ²¿´æ´¢Ð¾Æ¬¶ÁÈ¡MP3Êý
             -¾ÝµÄ²Ù×÷
  37          //  ËùÒÔ¿ª·¢ÕßÓ¦¸Ã¸ù¾Ý×Ô¼ºµÄÊµ¼ÊÊ¹ÓÃµÄ´æ´¢Ð¾Æ¬£¬È¥ÐÞ¸ÄÕâ¸öº¯Êý
  38          //  µ«ÊÇÒª±£Ö¤¶ÔÓÚLD3320Ð¾Æ¬µÄ²Ù×÷²»¸Ä±ä
  39          //
  40          //  LD_GetResult()º¯ÊýÄ¿Ç°Ö»¼òµ¥È¡ÁËµÚÒ»ºòÑ¡½á¹û×÷ÎªÊ¶±ð½á¹û
  41          //  ¿ª·¢ÕßÓ¦¸Ã¸ù¾Ý×Ô¼º²úÆ·Éè¼Æ£¬¾ö¶¨ÊÇ·ñÒª¶ÁÈ¡ÆäËûµÄÊ¶±ðºòÑ¡½á¹û
  42          /****************************************************************
             -********************/
  43          
  44          
  45          
  46          void LD_reset()
  47          {
  48   1        RSTB=1;
  49   1        delay(1);
C51 COMPILER V9.00   LDCHIP                       12/12/2011 19:59:16 PAGE 2   

  50   1        RSTB=0;
  51   1        delay(1);
  52   1        RSTB=1;
  53   1      
  54   1        delay(1);
  55   1        CSB=0;
  56   1        delay(1);
  57   1        CSB=1;
  58   1        delay(1);
  59   1      }
  60          
  61          void LD_Init_Common()
  62          {
  63   1        bMp3Play = 0;
  64   1      
  65   1        LD_ReadReg(0x06);  
  66   1        LD_WriteReg(0x17, 0x35); 
  67   1        delay(10);
  68   1        LD_ReadReg(0x06);  
  69   1      
  70   1        LD_WriteReg(0x89, 0x03);  
  71   1        delay(5);
  72   1        LD_WriteReg(0xCF, 0x43);   
  73   1        delay(5);
  74   1        LD_WriteReg(0xCB, 0x02);
  75   1        
  76   1        /*PLL setting*/
  77   1        LD_WriteReg(0x11, LD_PLL_11);       
  78   1        if (nLD_Mode == LD_MODE_MP3)
  79   1        {
  80   2          LD_WriteReg(0x1E, 0x00); 
  81   2          LD_WriteReg(0x19, LD_PLL_MP3_19);   
  82   2          LD_WriteReg(0x1B, LD_PLL_MP3_1B);   
  83   2          LD_WriteReg(0x1D, LD_PLL_MP3_1D);
  84   2        }
  85   1        else
  86   1        {
  87   2          LD_WriteReg(0x1E,0x00);
  88   2          LD_WriteReg(0x19, LD_PLL_ASR_19); 
  89   2          LD_WriteReg(0x1B, LD_PLL_ASR_1B);   
  90   2            LD_WriteReg(0x1D, LD_PLL_ASR_1D);
  91   2        }
  92   1        delay(10);
  93   1        
  94   1        LD_WriteReg(0xCD, 0x04);
  95   1        LD_WriteReg(0x17, 0x4c); 
  96   1        delay(5);
  97   1        LD_WriteReg(0xB9, 0x00);
  98   1        LD_WriteReg(0xCF, 0x4F); 
  99   1        LD_WriteReg(0x6F, 0xFF); 
 100   1      }
 101          
 102          void LD_Init_MP3()
 103          {
 104   1        nLD_Mode = LD_MODE_MP3;
 105   1        LD_Init_Common();
 106   1      
 107   1        LD_WriteReg(0xBD,0x02);
 108   1        LD_WriteReg(0x17, 0x48);
 109   1        delay(10);
 110   1      
 111   1        LD_WriteReg(0x85, 0x52); 
 112   1        LD_WriteReg(0x8F, 0x00);  
 113   1        LD_WriteReg(0x81, 0x00);
C51 COMPILER V9.00   LDCHIP                       12/12/2011 19:59:16 PAGE 3   

 114   1        LD_WriteReg(0x83, 0x00);
 115   1        LD_WriteReg(0x8E, 0xff);
 116   1        LD_WriteReg(0x8D, 0xff);
 117   1          delay(1);
 118   1        LD_WriteReg(0x87, 0xff);
 119   1        LD_WriteReg(0x89, 0xff);
 120   1        delay(1);
 121   1        LD_WriteReg(0x22, 0x00);    
 122   1        LD_WriteReg(0x23, 0x00);
 123   1        LD_WriteReg(0x20, 0xef);    
 124   1        LD_WriteReg(0x21, 0x07);
 125   1        LD_WriteReg(0x24, 0x77);          
 126   1          LD_WriteReg(0x25, 0x03);
 127   1          LD_WriteReg(0x26, 0xbb);    
 128   1          LD_WriteReg(0x27, 0x01); 
 129   1      }
 130            
 131          void LD_Init_ASR()
 132          {
 133   1        nLD_Mode=LD_MODE_ASR_RUN;
 134   1        LD_Init_Common();
 135   1      
 136   1        LD_WriteReg(0xBD, 0x00);
 137   1        LD_WriteReg(0x17, 0x48);
 138   1        delay( 10 );
 139   1      
 140   1        LD_WriteReg(0x3C, 0x80);    
 141   1        LD_WriteReg(0x3E, 0x07);
 142   1        LD_WriteReg(0x38, 0xff);    
 143   1        LD_WriteReg(0x3A, 0x07);
 144   1        
 145   1        LD_WriteReg(0x40, 0);          
 146   1        LD_WriteReg(0x42, 8);
 147   1        LD_WriteReg(0x44, 0);    
 148   1        LD_WriteReg(0x46, 8); 
 149   1        delay( 1 );
 150   1      }
 151          
 152          
 153          void ProcessInt0()
 154          {
 155   1        uint8 nAsrResCount=0;
 156   1      
 157   1        EX0=0;
 158   1        
 159   1        ucRegVal = LD_ReadReg(0x2B);
 160   1        if(nLD_Mode == LD_MODE_ASR_RUN)
 161   1        {
 162   2          // ÓïÒôÊ¶±ð²úÉúµÄÖÐ¶Ï
 163   2          // £¨ÓÐÉùÒôÊäÈë£¬²»ÂÛÊ¶±ð³É¹¦»òÊ§°Ü¶¼ÓÐÖÐ¶Ï£©
 164   2          LD_WriteReg(0x29,0) ;
 165   2          LD_WriteReg(0x02,0) ;
 166   2          if((ucRegVal & 0x10) &&
 167   2            LD_ReadReg(0xb2)==0x21 && 
 168   2            LD_ReadReg(0xbf)==0x35)
 169   2          {
 170   3            nAsrResCount = LD_ReadReg(0xba);
 171   3            if(nAsrResCount>0 && nAsrResCount<=4) 
 172   3            {
 173   4              nAsrStatus=LD_ASR_FOUNDOK;
 174   4            }
 175   3            else
 176   3              {
 177   4              nAsrStatus=LD_ASR_FOUNDZERO;
C51 COMPILER V9.00   LDCHIP                       12/12/2011 19:59:16 PAGE 4   

 178   4            } 
 179   3          }
 180   2          else
 181   2          {
 182   3            nAsrStatus=LD_ASR_FOUNDZERO;
 183   3          }
 184   2            
 185   2          LD_WriteReg(0x2b, 0);
 186   2            LD_WriteReg(0x1C,0);
 187   2          return;
 188   2        }
 189   1        
 190   1        // ÉùÒô²¥·Å²úÉúµÄÖÐ¶Ï£¬ÓÐÈýÖÖ£º
 191   1        // A. ÉùÒôÊý¾ÝÒÑÈ«²¿²¥·ÅÍê¡£
 192   1        // B. ÉùÒôÊý¾ÝÒÑ·¢ËÍÍê±Ï¡£
 193   1        // C. ÉùÒôÊý¾ÝÔÝÊ±½«ÒªÓÃÍê£¬ÐèÒª·ÅÈëÐÂµÄÊý¾Ý¡£  
 194   1        ucHighInt = LD_ReadReg(0x29); 
 195   1        ucLowInt=LD_ReadReg(0x02); 
 196   1        LD_WriteReg(0x29,0) ;
 197   1        LD_WriteReg(0x02,0) ;
 198   1          if(LD_ReadReg(0xBA)&CAUSE_MP3_SONG_END)
 199   1          {
 200   2        // A. ÉùÒôÊý¾ÝÒÑÈ«²¿²¥·ÅÍê¡£
 201   2      
 202   2          LD_WriteReg(0x2B,  0);
 203   2              LD_WriteReg(0xBA, 0); 
 204   2          LD_WriteReg(0xBC,0x0);  
 205   2          bMp3Play=0;         // ÉùÒôÊý¾ÝÈ«²¿²¥·ÅÍêºó£¬ÐÞ¸ÄbMp3PlayµÄ±äÁ¿
 206   2          LD_WriteReg(0x08,1);
 207   2          delay_2(5);
 208   2              LD_WriteReg(0x08,0);
 209   2          LD_WriteReg(0x33, 0);
 210   2      
 211   2          return ;
 212   2           }
 213   1      
 214   1         if(nMp3Pos>=nMp3Size)
 215   1        {
 216   2        // B. ÉùÒôÊý¾ÝÒÑ·¢ËÍÍê±Ï¡£
 217   2      
 218   2          LD_WriteReg(0xBC, 0x01);
 219   2          LD_WriteReg(0x29, 0x10);
 220   2      //    bMp3Play=0;       //  ´ËÊ±£¬Ö»ÊÇÖ÷¿ØMCU°ÑËùÓÐMP3Êý¾Ý·¢ËÍµ½LD3320Ð
             -¾Æ¬ÄÚ£¬µ«ÊÇ»¹Ã»ÓÐ°ÑËÍÈëµÄÊý¾ÝÈ«²¿²¥·ÅÍê±Ï
 221   2          EX0=1;
 222   2      
 223   2          return; 
 224   2        }
 225   1      
 226   1        // C. ÉùÒôÊý¾ÝÔÝÊ±½«ÒªÓÃÍê£¬ÐèÒª·ÅÈëÐÂµÄÊý¾Ý¡£  
 227   1      
 228   1        LD_ReloadMp3Data_2();
 229   1          
 230   1        LD_WriteReg(0x29,ucHighInt); 
 231   1        LD_WriteReg(0x02,ucLowInt) ;
 232   1      
 233   1        delay_2(10);
 234   1        EX0=1;
 235   1      
 236   1      }
 237          
 238          
 239          
 240          
C51 COMPILER V9.00   LDCHIP                       12/12/2011 19:59:16 PAGE 5   

 241          void LD_play()
 242          {
 243   1        nMp3Pos=0;
 244   1        bMp3Play=1;
 245   1      
 246   1        if (nMp3Pos >=  nMp3Size)
 247   1          return ; 
 248   1      
 249   1        LD_ReloadMp3Data();
 250   1      
 251   1          LD_WriteReg(0xBA, 0x00);
 252   1        LD_WriteReg(0x17, 0x48);
 253   1        LD_WriteReg(0x33, 0x01);
 254   1        LD_WriteReg(0x29, 0x04);
 255   1        
 256   1        LD_WriteReg(0x02, 0x01); 
 257   1        LD_WriteReg(0x85, 0x5A);
 258   1      
 259   1        EX0=1;
 260   1      
 261   1      }
 262          
 263          void LD_AdjustMIX2SPVolume(uint8 val)
 264          {
 265   1        ucSPVol = val;
 266   1        val = ((15-val)&0x0f) << 2;
 267   1        LD_WriteReg(0x8E, val | 0xc3); 
 268   1        LD_WriteReg(0x87, 0x78); 
 269   1      }
 270          
 271          void LD_ReloadMp3Data()
 272          {
 273   1        uint32 nCurMp3Pos;
 274   1        uint8 val;
 275   1        uint8 k;
 276   1      
 277   1        if (nDemoFlag)
 278   1        {
 279   2          ucStatus = LD_ReadReg(0x06);
 280   2          while ( !(ucStatus&MASK_FIFO_STATUS_AFULL) && (nMp3Pos<nMp3Size
             -) )
 281   2          {
 282   3            val = bpDemoSound[nMp3Pos++];
 283   3            LD_WriteReg(0x01,val);
 284   3            if (nMp3Pos == DEMO_SOUND_SIZE)
 285   3              nMp3Pos = 0;
 286   3      
 287   3            ucStatus = LD_ReadReg(0x06);
 288   3          }
 289   2          
 290   2        }
 291   1      
 292   1      }
*** WARNING C280 IN LINE 273 OF LDCHIP.C: 'nCurMp3Pos': unreferenced local vari
             -able
*** WARNING C280 IN LINE 275 OF LDCHIP.C: 'k': unreferenced local variable
 293          
 294          /****************************************************************
             -*****
 295          //ÎªÁËÏû³ý±àÒëÊ±µÄ ¾¯¸æ *** WARNING L15: MULTIPLE CALL TO SEGMENT
 296          //°ÑÔÚÖÐ¶Ïº¯ÊýÖÐÐèÒªµ÷ÓÃµÄº¯ÊýÖØÐÂ¸´ÖÆ²¢ÃüÃû
 297          //Ïû³ý¾¯¸æ Warning L15£¬²¢ÇÒ±ÜÃâÓÉÓÚº¯ÊýÖØÈë¿ÉÄÜ´øÀ´µÄÒþ²ØBug
 298          /****************************************************************
             -*****/
C51 COMPILER V9.00   LDCHIP                       12/12/2011 19:59:16 PAGE 6   

 299          void LD_ReloadMp3Data_2()
 300          {
 301   1        uint32 nCurMp3Pos;
 302   1        uint8 val;
 303   1        uint8 k;
 304   1      
 305   1        nCurMp3Pos = nMp3StartPos + nMp3Pos;
 306   1        FLASH_CS=1;
 307   1        FLASH_CLK=0;
 308   1        FLASH_CS=0;
 309   1      
 310   1         IO_Send_Byte(W25P_FastReadData);   
 311   1         IO_Send_Byte(((nCurMp3Pos & 0xFFFFFF) >> 16));  
 312   1         IO_Send_Byte(((nCurMp3Pos & 0xFFFF) >> 8));
 313   1         IO_Send_Byte(nCurMp3Pos & 0xFF);
 314   1         IO_Send_Byte(0xFF);
 315   1      
 316   1        ucStatus = LD_ReadReg(0x06);
 317   1        while ( !(ucStatus&MASK_FIFO_STATUS_AFULL) && (nMp3Pos<nMp3Size)
             - )
 318   1        {
 319   2          val=0;
 320   2          for(k=0;k<8;k++)
 321   2          {
 322   3            FLASH_CLK=0;
 323   3            val<<=1;
 324   3            FLASH_CLK=1;
 325   3            val|=FLASH_DO;
 326   3          }
 327   2          LD_WriteReg(0x01,val);
 328   2      
 329   2          nMp3Pos++;
 330   2      
 331   2          ucStatus = LD_ReadReg(0x06);
 332   2        }
 333   1        
 334   1        FLASH_CS=1;
 335   1        FLASH_CLK=0;
 336   1      
 337   1      }
 338          
 339          // Return 1: success.
 340          uint8 LD_Check_ASRBusyFlag_b2()
 341          {
 342   1        uint8 j;
 343   1        uint8 flag = 0;
 344   1        for (j=0; j<10; j++)
 345   1        {
 346   2          if (LD_ReadReg(0xb2) == 0x21)
 347   2          {
 348   3            flag = 1;
 349   3            break;
 350   3          }
 351   2          delay(10);    
 352   2        }
 353   1        return flag;
 354   1      }
 355          
 356          void LD_AsrStart()
 357          {
 358   1        LD_Init_ASR();
 359   1      }
 360          
 361          // Return 1: success.
C51 COMPILER V9.00   LDCHIP                       12/12/2011 19:59:16 PAGE 7   

 362          uint8 LD_AsrRun()
 363          {
 364   1        LD_WriteReg(0x35, MIC_VOL);
 365   1        LD_WriteReg(0x1C, 0x09);
 366   1        LD_WriteReg(0xBD, 0x20);
 367   1        LD_WriteReg(0x08, 0x01);
 368   1        delay( 1 );
 369   1        LD_WriteReg(0x08, 0x00);
 370   1        delay( 1 );
 371   1      
 372   1        if(LD_Check_ASRBusyFlag_b2() == 0)
 373   1        {
 374   2          return 0;
 375   2        }
 376   1      
 377   1        LD_WriteReg(0xB2, 0xff);  
 378   1        LD_WriteReg(0x37, 0x06);
 379   1        delay( 5 );
 380   1        LD_WriteReg(0x1C, 0x0b);
 381   1        LD_WriteReg(0x29, 0x10);
 382   1        
 383   1        LD_WriteReg(0xBD, 0x00);
 384   1        EX0=1;
 385   1        return 1;
 386   1      }
 387          
 388          // Return 1: success.
 389          //  Ìí¼ÓÊ¶±ð¹Ø¼ü´ÊÓï£¬¿ª·¢Õß¿ÉÒÔÑ§Ï°"ÓïÒôÊ¶±ðÐ¾Æ¬LD3320¸ß½×ÃØ¼®.pd
             -f"ÖÐ¹ØÓÚÀ¬»ø´ÊÓïÎüÊÕ´íÎóµÄÓÃ·¨
 390          uint8 LD_AsrAddFixed()
 391          {
 392   1        uint8 k, flag;
 393   1        uint8 nAsrAddLength;
 394   1        const char sRecog[5][13] = {"bei jing", "shou du", 
 395   1          "shang hai", "tian jin", "chong qing"};
 396   1          const uint8 pCode[5] = {CODE_BEIJING, CODE_BEIJING, CODE_SHANGH
             -AI, CODE_TIANJIN, CODE_CHONGQING};
 397   1          
 398   1        flag = 1;
 399   1        for (k=0; k<5; k++)
 400   1        {
 401   2            
 402   2          if(LD_Check_ASRBusyFlag_b2() == 0)
 403   2          {
 404   3            flag = 0;
 405   3            break;
 406   3          }
 407   2          
 408   2          LD_WriteReg(0xc1, pCode[k] );
 409   2          LD_WriteReg(0xc3, 0 );
 410   2          LD_WriteReg(0x08, 0x04);
 411   2          delay(1);
 412   2          LD_WriteReg(0x08, 0x00);
 413   2          delay(1);
 414   2      
 415   2          for (nAsrAddLength=0; nAsrAddLength<20; nAsrAddLength++)
 416   2          {
 417   3            if (sRecog[k][nAsrAddLength] == 0)
 418   3              break;
 419   3            LD_WriteReg(0x5, sRecog[k][nAsrAddLength]);
 420   3          }
 421   2          LD_WriteReg(0xb9, nAsrAddLength);
 422   2          LD_WriteReg(0xb2, 0xff);
 423   2          LD_WriteReg(0x37, 0x04);
C51 COMPILER V9.00   LDCHIP                       12/12/2011 19:59:16 PAGE 8   

 424   2        }
 425   1          return flag;
 426   1      }
 427          
 428          
 429          
 430          uint8 LD_GetResult()
 431          {
 432   1        return LD_ReadReg(0xc5 );
 433   1      }
 434          
 435          
 436          
*** WARNING C316 IN LINE 436 OF LDChip.c: unterminated conditionals


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1536    ----
   CONSTANT SIZE    =     70    ----
   XDATA SIZE       =   1235    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17      86
   IDATA SIZE       =      6    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
